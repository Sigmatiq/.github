name: Reusable Publish Python

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
      package-dir:
        required: false
        type: string
        default: '.'
      upload-url:
        required: false
        type: string
        default: 'https://pkgs.dev.azure.com/sigmatiq/_packaging/Sigmatiq/pypi/upload/'
      bump-version:
        description: 'Bump version before publishing'
        required: false
        type: boolean
        default: false
      bump-level:
        description: 'Version bump level'
        required: false
        type: string
        default: 'patch'
    secrets:
      AZURE_ARTIFACTS_PAT:
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Bump version (pyproject.toml)
        if: inputs.bump-version == true
        working-directory: ${{ inputs.package-dir }}
        run: |
          set -euo pipefail
          LEVEL="${{ inputs.bump-level }}"
          echo "Bumping version ($LEVEL) in pyproject.toml"
          python - << 'PY'
import re, sys
from pathlib import Path
p = Path('pyproject.toml')
if not p.exists():
    print('pyproject.toml not found; skipping bump', file=sys.stderr)
    sys.exit(0)
s = p.read_text(encoding='utf-8')
m = re.search(r"(?m)^version\s*=\s*\"(\d+)\.(\d+)\.(\d+)\"\s*$", s)
if not m:
    # Try under [project]
    m = re.search(r"(?m)^\s*version\s*=\s*\"(\d+)\.(\d+)\.(\d+)\"", s)
if not m:
    print('No semantic version like X.Y.Z found; skipping bump', file=sys.stderr)
    sys.exit(0)
maj, minr, pat = map(int, m.groups())
level = "${{ inputs.bump-level }}".strip().lower()
if level == 'major':
    maj, minr, pat = maj+1, 0, 0
elif level == 'minor':
    minr, pat = minr+1, 0
else:
    pat = pat+1
new = f'{maj}.{minr}.{pat}'
news = re.sub(m.re, f'version = "{new}"', s, count=1)
p.write_text(news, encoding='utf-8')
print('Bumped version to', new)
PY

      - name: Build wheel and sdist
        working-directory: ${{ inputs.package-dir }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build

      - name: Publish to Azure Artifacts PyPI
        working-directory: ${{ inputs.package-dir }}
        env:
          TWINE_USERNAME: az
          TWINE_PASSWORD: ${{ secrets.AZURE_ARTIFACTS_PAT }}
          TWINE_REPOSITORY_URL: ${{ inputs.upload-url }}
        run: |
          python -m pip install twine
          python -m twine upload --non-interactive dist/*
